/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

/* default */

/* harmony default export */

/* reexport */

/*#__PURE__*/

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/** @license React v17.0.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/***/

//

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    new function as the true mapToProps for subsequent calls.

//    the developer that their mapToProps function is not returning a valid result.

//  * Detects whether the mapToProps function being called depends on props, which

//  * On first call, handles mapToProps if returns another function, and treats that

//  * On first call, verifies the first result is a plain object, in order to warn

// - However, we may have gotten new wrapper props after that

// - This render may have been triggered by a Redux store update that produced new child props

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// Actually run the selector with the most recent store state and wrapper props

// Actually subscribe to the nearest connected ancestor (or store)

// Allow injecting another batching function later

// Based on the previous check, one of these must be true

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/connect.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/Subscription.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/batch.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/bindActionCreators.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js

// Capture values for checking if and when this component unmounts

// Default to a dummy "batch" implementation that just runs the callback

// Distinguish between actual "data" props that were passed to the wrapper component,

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// Enable batched updates in our subscriptions for use

// If React sees the exact same element reference as last time, it bails out of re-rendering

// If pure is true, the selector returned by selectorFactory will memoize its results,

// If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

// If the child props haven't changed, nothing to do here - cascade the subscription update

// If the render was from a store update, clear out that reference and cascade the subscriber update

// If we aren't running in "pure" mode, we don't want to memoize values.

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.

// If we're not subscribed to the store, nothing to do here

// In that case, throw the error from here so it doesn't get lost.

// It's possible that we caught an error due to a bad mapState function, but the

// Memoize the check that determines which context instance we should use.

// Note that we do this because on renders _not_ caused by store updates, we need the latest store state

// Now that all that's done, we can finally try to actually render the child component.

// Otherwise, put this component's subscription instance into context, so that

// Our re-subscribe logic only runs when the store/subscription setup changes

// Propagate any mapState/mapDispatch errors upwards

// Pull data from the store after first render in case the store has

// Re-create this selector whenever the store changes.

// React currently throws a warning when using useLayoutEffect on the server.

// Save references to the new child props.  Note that we track the "child props from store update"

// Set up refs to coordinate values between the subscription effect and the render logic

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// TODO We're reading the store directly in render() here. Bad idea?

// TODO: Add more comments

// The child props selector needs the store reference as an input.

// This Subscription's source should match where store came from: props vs. context. A component

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// This will likely cause Bad Things (TM) to happen in Concurrent Mode.

// To avoid conditionally calling hooks, we fall back to a tiny wrapper

// To get around it, we can conditionally useEffect on the server (no-op) and

// To maintain the wrapperProps object reference, memoize this destructuring.

// Tricky logic here:

// UNUSED EXPORTS: ReactReduxContext, batch, connectAdvanced, createDispatchHook, createSelectorHook, createStoreHook, shallowEqual, useDispatch, useSelector, useStore

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.

// We memoize the elements for the rendered child component as an optimization.

// We need this to execute synchronously every time we re-render. However, React warns

// We want to capture the wrapper props and child props we used for later comparisons

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// allow detectFactoryAndVerify to get ownProps

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// ancestor components re-render before descendants

// and values needed to control behavior (forwarded refs, alternate context instances).

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// available, otherwise a store update may happen between render and the effect,

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// changed since we began.

// connected descendants won't update until after this component is done

// connected to the store via props shouldn't use subscription from context, or vice versa.

// createConnect with default args builds the 'official' connect behavior. Calling it with

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// different options opens up some testing and extensibility scenarios

// encapsulates the subscription logic for connecting a component to the redux store, as

// forcing another re-render, which we don't want.

// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes

// if we ever do those wrong, this throw will surface the error in our tests.

// is created synchronously, otherwise a store update may occur before the

// just useEffect instead to avoid the warning, since neither will run anyway.

// object and shouldComponentUpdate will always return true.

// options object:

// parent re-rendered without this component and we're about to unmount.

// passed through to selectorFactory

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// props have not changed. If false, the selector will always return a new

// subscription callback always has the selector from the latest render commit

// subscription is created and an inconsistent state may be observed

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// that have been unsubscribed in the  middle of the notification loop.

// that just executes the given callback immediately.

// the middle of the notification loop, where `subscription` will then be null. This can

// therefore not reporting its length accurately..

// this function wraps mapToProps in a proxy function which does several things:

// to determine what the child props should be

// to determine what the child props should be.

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// used in error messages

// used to compute Connect's displayName from the wrapped component's displayName.

// well as nesting subscriptions of descendant components, so that we can ensure the

// whether mapToProps needs to be invoked when props have changed.

// which may cause missed updates; we also must ensure the store subscription

// with standard React renderers (ReactDOM, React Native)
