/* binding */

/* eslint-disable no-console */

/* generic:
    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
    var step;
    var iterations = 0;
    while (!(step = iterator.next()).done) {
      iterations++;
      if (fn(step.value[1], step.value[0], this) === false) {
        break;
      }
    }
    return iterations;
    */

/* harmony export */

/* reverse */

/* undefined */

/* unused harmony exports Collection, Iterable, List, Map, OrderedMap, OrderedSet, Range, Record, Repeat, Seq, Set, Stack, get, getIn, has, hasIn, hash, is, isAssociative, isCollection, isImmutable, isIndexed, isKeyed, isList, isMap, isOrdered, isOrderedMap, isOrderedSet, isPlainObject, isRecord, isSeq, isSet, isStack, isValueObject, merge, mergeDeep, mergeDeepWith, mergeWith, remove, removeIn, set, setIn, update, updateIn, version */

/**
 * An extension of the "same-value" algorithm as [described for use by ES6 Map
 * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
 *
 * NaN is considered the same as NaN, however -0 and 0 are considered the same
 * value, which is different from the algorithm described by
 * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
 *
 * This is extended further to allow Objects to describe the values they
 * represent, by way of `valueOf` or `equals` (and `hashCode`).
 *
 * Note: because of this extension, the key equality of Immutable.Map and the
 * value equality of Immutable.Set will differ from ES6 Map and Set.
 *
 * ### Defining custom values
 *
 * The easiest way to describe the value an object represents is by implementing
 * `valueOf`. For example, `Date` represents a value by returning a unix
 * timestamp for `valueOf`:
 *
 *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
 *     var date2 = new Date(1234567890000);
 *     date1.valueOf(); // 1234567890000
 *     assert( date1 !== date2 );
 *     assert( Immutable.is( date1, date2 ) );
 *
 * Note: overriding `valueOf` may have other implications if you use this object
 * where JavaScript expects a primitive, such as implicit string coercion.
 *
 * For more complex types, especially collections, implementing `valueOf` may
 * not be performant. An alternative is to implement `equals` and `hashCode`.
 *
 * `equals` takes another object, presumably of similar type, and returns true
 * if it is equal. Equality is symmetrical, so the same result should be
 * returned if this and the argument are flipped.
 *
 *     assert( a.equals(b) === b.equals(a) );
 *
 * `hashCode` returns a 32bit integer number representing the object which will
 * be used to determine how to store the value object in a Map or Set. You must
 * provide both or neither methods, one must not exist without the other.
 *
 * Also, an important relationship between these methods must be upheld: if two
 * values are equal, they *must* return the same hashCode. If the values are not
 * equal, they might have the same hashCode; this is called a hash collision,
 * and while undesirable for performance reasons, it is acceptable.
 *
 *     if (a.equals(b)) {
 *       assert( a.hashCode() === b.hashCode() );
 *     }
 *
 * All Immutable collections are Value Objects: they implement `equals()`
 * and `hashCode()`.
 */

/**
 * It's unclear what the desired behavior is for merging two collections that
 * fall into separate categories between keyed, indexed, or set-like, so we only
 * consider them mergeable if they fall into the same category.
 */

/**
 * MIT License
 * 
 * Copyright (c) 2014-present, Lee Byron and other contributors.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Returns a lazy Seq of `value` repeated `times` times. When `times` is
 * undefined, returns an infinite sequence of `value`.
 */

/**
 * Returns a lazy seq of nums from start (inclusive) to end
 * (exclusive), by step, where start defaults to 0, step to 1, and end to
 * infinity. When start is equal to end, returns empty list.
 */

/**
 * Returns true if the value is a potentially-persistent data structure, either
 * provided by Immutable.js or a plain Array or Object.
 */

/***/

/*, ...collections */

/*, ...values*/

/*@__PURE__*/

//

//     A String property name P is an array index if and only if

//     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal

//     to 2^32âˆ’1.

// # pragma Helper functions

// ### Common JavaScript methods and properties

// ### Conversion to other types

// ### ES6 Collection methods (ES6 Array and Map)

// ### Hashable Object

// ### More collection methods

// ### More sequential methods

// #pragma Helper Functions

// #pragma Helper functions

// #pragma Iterators

// #pragma Root Sequences

// #pragma Trie Nodes

// (exclusive) by dropping high bits.

// @pragma Access

// @pragma Composition

// @pragma Iteration

// @pragma Modification

// @pragma Mutability

// A function which returns a value representing an "owner" for transient writes

// Account for -0 which is negative, but not less than 0.

// An object is only Array-like if it has a property where the last value

// At this point we couldn't get the IE `uniqueID` to use as a hash

// Check if entry exists first so array access doesn't throw for holes

// Compress arbitrarily large numbers into smi hashes.

// Constants describing the size of trie nodes.

// Copy on write

// Deprecated: left to attempt not to break any external code which

// Document

// Don't bother instantiating parent iterator if taking 0.

// Drop any high bits from accidentally long hash codes.

// Effectively the opposite of "Collection.toSeq()"

// Element

// Get references to ES5 object methods.

// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it

// Identify the new top root node of the subtree of the old root.

// If collection.size is undefined, the size of the realized sliceSeq is

// If index is negative, it should resolve relative to the size of the

// If it's going to end after it starts, it's empty.

// If possible, use a WeakMap.

// If the new origin is within the tail, then we do not need a root.

// If the size has been reduced, there's a chance the tail needs to be trimmed.

// In that case, resolvedSize will be NaN and sliceSize will remain undefined.

// Iteratively going up the prototype chain is needed for cross-realm environments (differing contexts, iframes, etc)

// Keyed collections produce an array of tuples.

// Late binding

// Locate or create the new tail.

// Merge Tail into tree.

// Mixin subclasses

// N >>> 0 is shorthand for ToUint32

// New size might need creating a higher root.

// Note: all of these methods are deprecated.

// Note: resolvedEnd is undefined when the original sequence's length is

// Note: this a generic base implementation of __iterate in terms of

// Object.defineProperty failed. Probably IE8.

// Only {length: 0} is considered Array-like.

// Sanitize begin & end using this shorthand for ToInt32(argument)

// Sanitize indices using this shorthand for ToInt32(argument)

// Shift by 0 fixes the sign on the high part.

// Since we can't define a non-enumerable property on the object

// TODO: seems like these methods are very similar

// The base prototype's toString deals with Argument objects and native namespaces like Math

// The hash code for a string is computed as

// The hash values for built-in constants are a 1 value for each 5-byte

// This function drops the highest order bit in a signed number, maintaining

// This implements "is array index" which the ECMAString spec defines as:

// This is the hash from JVM

// Trim the new sides of the new root.

// True if Object.defineProperty works as expected. IE8 fails this test.

// Use Late Binding here to solve the circular dependency.

// Use Record.getDescriptiveName() instead

// Values which have either 00 or 11 as the high order bits qualify.

// We cache as an entries array, so we can just return the cache!

// __iterator which may be more generically useful in the future.

// `JSON.stringify` which is what we want.

// a known size and these do not resolve to NaN.

// abstract __iterateUncached(fn, reverse)

// abstract __iteratorUncached(type, reverse)

// and avoid memory leaks from the IE cloneNode bug.

// and we couldn't use a non-enumerable property to exploit the

// b is considered the new max if the comparator declares them equal, but

// begin or end will be NaN if they were provided as negative numbers and

// collection. However size may be expensive to compute if not cached, so

// dontEnum bug so we simply add the `UID_HASH_KEY` on the node

// elements after resolvedBegin.

// eslint-disable-next-line no-unused-vars

// http://jsperf.com/hashing-strings

// http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects

// http://www.ecma-international.org/ecma-262/6.0/#sec-toint32

// in the array-like may be found (which could be undefined).

// in the parent iteration.

// indexed:

// int

// itself.

// keep track if the set is altered by the map function

// only call count() if the number is in fact negative.

// reduces the odds of a hash collision for these common values.

// relies on a ._name property existing on record instances.

// removed

// s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],

// save our hash on it. Since this is a function it will not show up in

// shift region expect for the first, which encodes the value. This

// super.reverse()

// super.slice(begin, end);

// the return of any subsequent call of this function.

// the sign bit.

// the string. We "mod" the result to make it between 0 (inclusive) and 2^31

// they are not equal and b is in fact a nullish value.

// this collection's size is unknown. In that case, cache first so there is

// to tries. The return value will only ever equal itself, and will not equal

// unknown and this slice did not supply an end and should contain all

// unknown at this point unless the number of items to slice is 0

// v8 has an optimization for storing 31-bit signed numbers.

// we'll hijack one of the less-used non-enumerable properties to

// where s[i] is the ith character of the string and n is the length of
